name: Build & Release All Platforms

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.2'

      - name: Build macOS ARM64
        run: |
          CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 go build -o irestore_darwin_arm64 ./cmd/irestore

      - name: Build macOS AMD64
        run: |
          CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 go build -o irestore_darwin_amd64 ./cmd/irestore

      - name: Create Universal Binary & Archive
        run: |
          lipo -create -output irestore_macos_universal irestore_darwin_amd64 irestore_darwin_arm64
          tar -czf irestore_macos_universal.tar.gz irestore_macos_universal

      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS
          path: irestore_macos_universal.tar.gz

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.2'

      - name: Build for Linux ${{ matrix.arch }}
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=${{ matrix.arch }} go build -o irestore_linux_${{ matrix.arch }} ./cmd/irestore
          tar -czf irestore_linux_${{ matrix.arch }}.tar.gz irestore_linux_${{ matrix.arch }}

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Linux-${{ matrix.arch }}
          path: irestore_linux_${{ matrix.arch }}.tar.gz

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.2'

      - name: Build for Windows ${{ matrix.arch }}
        run: |
          $env:CGO_ENABLED="0"
          $env:GOOS="windows"
          $env:GOARCH="${{ matrix.arch }}"
          go build -o irestore_windows_${{ matrix.arch }}.exe ./cmd/irestore
          tar -czf irestore_windows_${{ matrix.arch }}.tar.gz irestore_windows_${{ matrix.arch }}.exe

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Windows-${{ matrix.arch }}
          path: irestore_windows_${{ matrix.arch }}.tar.gz

  release:
    needs: [build-macos, build-linux, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Required for full git log

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: List downloaded files
        run: ls -R dist/

      - name: Generate changelog from commits
        id: changelog
        run: |
          CURRENT_TAG="${GITHUB_REF#refs/tags/}"
          PREV_TAG=$(git tag --sort=-creatordate | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | grep -v "$CURRENT_TAG" | head -n 1 || echo "")
          echo "Previous tag: $PREV_TAG"

          if [ -z "$PREV_TAG" ]; then
            echo "body=Initial release" >> $GITHUB_OUTPUT
          else
            changelog=$(git log --pretty=format:"* %s (%an)" "$PREV_TAG"..HEAD)
            changelog="${changelog//'%'/'%25'}"
            changelog="${changelog//$'\n'/'%0A'}"
            changelog="${changelog//$'\r'/'%0D'}"
            echo "body=$changelog" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/**/*.tar.gz
          body: ${{ steps.changelog.outputs.body }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
